#pragma checksum "F:\四川师范大学实验室安全考试项目\yun\lab\project\LabExam\LabExam\Views\Statistics\Report.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "baa9cf6fbae5f57064348774e281ea7111a5c5c1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Statistics_Report), @"mvc.1.0.view", @"/Views/Statistics/Report.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Statistics/Report.cshtml", typeof(AspNetCore.Views_Statistics_Report))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "F:\四川师范大学实验室安全考试项目\yun\lab\project\LabExam\LabExam\Views\_ViewImports.cshtml"
using LabExam;

#line default
#line hidden
#line 2 "F:\四川师范大学实验室安全考试项目\yun\lab\project\LabExam\LabExam\Views\_ViewImports.cshtml"
using LabExam.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"baa9cf6fbae5f57064348774e281ea7111a5c5c1", @"/Views/Statistics/Report.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"25a346eec04c34e7426a0411470cd3c767046258", @"/Views/_ViewImports.cshtml")]
    public class Views_Statistics_Report : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/echarts/echarts.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/echarts/walden.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "F:\四川师范大学实验室安全考试项目\yun\lab\project\LabExam\LabExam\Views\Statistics\Report.cshtml"
  
    ViewData["Title"] = "实验室安全教育在线-考试统计报表";
    Layout = "~/Views/Shared/_BackEnd_Layout.cshtml";

#line default
#line hidden
            BeginContext(109, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(111, 52, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "049d9f42c31449bdaae98c680495a9dc", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(163, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(165, 47, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "67435c6da6324c0896cc14f104c69f1d", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(212, 1740, true);
            WriteLiteral(@"

<div class="" margin-5px bc-clr-white  padding-10px border-little-grey-all "">
    <div id=""tablist-hover"">
        <ul class=""nav nav-tabs"" role=""tablist"">
            <li role=""presentation"" class=""active"">
                <a href=""#firstView"" aria-controls=""home"" role=""tab"" data-toggle=""tab"">
                    统计视图
                </a>
            </li>
        </ul>
        <div class=""tab-content margin-top-10px"">
            <div role=""tabpanel"" class=""tab-pane active"" id=""firstView"">
                <div style=""width: 100%; height:450px;"" id=""InstituteExamStatistic"">

                </div>
                <div class="" padding-10px "">
                    <span class="" font-size-15 font-weight-600"">
                        查询年级:
                    </span>
                    <select name=""studentGrade"" id=""studentGrade"" data-height=""24"" data-width=""150"" class=""font-size-14 font-weight-400 padding-left-5px "">

                    </select><button class="" btn btn-primary btn-sm ma");
            WriteLiteral(@"rgin-left-15px"" data-height=""15"">重新加载</button>
                </div>
                <div class="" flex-layout"">
                    <div class="" flex-item-4 bc-clr-white  "">
                        <div id=""chart-student-info"" style="" height:320px;"">

                        </div>

                    </div>
                </div>

                <div class="" flex-layout"">

                    <div class=""flex-item-3  bc-clr-white margin-5px padding-10px"">
                        <div id=""WebSiteCallOption"" style="" width:100%; height:400px"">

                        </div>
                    </div>

                </div>

            </div>
        </div>
    </div>
</div>


");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(1975, 10837, true);
                WriteLiteral(@"
    <script>
        var theme = ""walden"";

        function LoadYear() {
            var yearNow = new Date().getFullYear();

            $(""#studentGrade"").append('<option value=""-1"">所有年级</option>');
            for (var index = yearNow; index > 2016; index--) {
                $(""#studentGrade"")
                    .append(`<option value=""${index}"">${index}</option>`);
            }
        }

        LoadYear();

        function loadView(){
            var instituteExamStatistic = echarts.init(document.getElementById('InstituteExamStatistic'), theme);
            instituteExamStatistic.showLoading();

            $.ajax({
                url: ""/EChart/Pass"",
                type: ""get"",
                dataType: ""json"",
                data: {
                    grade: $('#studentGrade').val()
                },
                success: function (json, textStatus, jqXhr) {
                    console.log(json);

                    var instituteOption = {
                ");
                WriteLiteral(@"        title: {
                            text: '四川师范大学各学院考试情况',
                            subtext: '各学院统计报表'
                        },
                        tooltip: {
                            trigger: 'axis'
                        },
                        legend: {
                            data: ['已通过', '未通过']
                        },
                        grid: {
                            top: 80,
                            left: 40,
                            right: 10
                        },
                        toolbox: {
                            show: true,
                            feature: {
                                dataView: { show: true, readOnly: false },
                                magicType: { show: true, type: ['line', 'bar'] },
                                restore: { show: true },
                                saveAsImage: { show: true }
                            }
                        },
                        c");
                WriteLiteral(@"alculable: true,
                        xAxis: [
                            {
                                name: ""各学院名称"",
                                nameRotate: 10,
                                type: 'category',
                                axisLabel: {
                                    rotate: 28
                                },
                                data: json.names
                            }
                        ],
                        yAxis: [
                            {
                                name: ""人数"",
                                type: 'value'
                            }
                        ],
                        series: [
                            {
                                name: '已通过',
                                type: 'bar',
                                data: json.va1Pass,
                                markLine: {
                                    data: [
                                     ");
                WriteLiteral(@"   { type: 'average', name: '平均值' }
                                    ]
                                },
                                label: {
                                    show: true,
                                    verticalAlign: ""top"",
                                    position: [0, -20],
                                    formatter: ""{c}人""
                                }
                            },
                            {
                                name: '未通过',
                                type: 'bar',
                                data: json.va1NotPass,
                                markLine: {
                                    data: [
                                        { type: 'average', name: '平均值' }
                                    ]
                                },
                                label: {
                                    show: true,
                                    verticalAlign: ""top"",
               ");
                WriteLiteral(@"                     position: [0, -20],
                                    formatter: ""{c}人""
                                }
                            }
                        ]
                    };

                    instituteExamStatistic.hideLoading();
                    instituteExamStatistic.setOption(instituteOption, true);

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    onMask(""错误"", errorThrown);
                }
            });

        }

        loadView();

        $(""#studentGrade"").change(function() {
            loadView();
        });

        var myChart = echarts.init(document.getElementById('chart-student-info'), theme);
        var myScoreChart = echarts.init(document.getElementById('WebSiteCallOption'), theme);
        myChart.showLoading();
        myScoreChart.showLoading();
        $.ajax({
            url: ""/EChart/Exam"",
            type: ""get"",
            dataType: ""json"",
       ");
                WriteLiteral(@"     success: function (json, textStatus, jqXhr) {
                console.log(json);

                var optionExam = {
                    title: {
                        text: '安全考试进行情况',
                        subtext: ""Safety test situation display"",
                        x: 'center',
                        textStyle: {
                            fontSize: 16
                        }
                    },
                    toolbox: {
                        orient: ""horizontal"",
                        itemSize: ""16"",
                        itemGap: 20,
                        feature: {
                            saveAsImage: {
                                name: ""安全考试进行情况""
                            },
                            restore: {},

                        }
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: ""{a} <br/>{b} : {c} ({d}%)""
                    },
            ");
                WriteLiteral(@"        legend: {
                        orient: 'vertical',
                        top: 40,
                        left: 'right',
                        data: ['通过考试', '已经完成的学习任务', '尚未完成的学习任务', '尚未学习', '从未进入系统']
                    },
                    series: [
                        {
                            name: '情况',
                            type: 'pie',
                            radius: '55%',
                            center: ['50%', '60%'],
                            data: [
                                { value: json.pass, name: '通过考试' },
                                { value: json.learningFinish, name: '已经完成的学习任务' },
                                { value: json.learningNotFinish, name: '尚未完成的学习任务' },
                                { value: json.notLearning, name: '尚未学习' },
                                { value: json.notJoinSystemLearning, name: '从未进入系统' }
                            ],
                            itemStyle: {
                          ");
                WriteLiteral(@"      emphasis: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                };
                var app = {}
                app.currentIndex = -1;

                setInterval(function () {
                    var dataLen = option_exam.series[0].data.length;
                    // 取消之前高亮的图形
                    myChart.dispatchAction({
                        type: 'downplay',
                        seriesIndex: 0,
                        dataIndex: app.currentIndex
                    });
                    app.currentIndex = (app.currentIndex + 1) % dataLen;
                    // 高亮当前图形
                    myChart.dispatchAction({
                        type: 'highlight',
                        seriesIndex: 0,
                        dat");
                WriteLiteral(@"aIndex: app.currentIndex
                    });
                    // 显示 tooltip
                    myChart.dispatchAction({
                        type: 'showTip',
                        seriesIndex: 0,
                        dataIndex: app.currentIndex
                    });
                }, 2500);

                var optionScore = {
                    title: {
                        text: ""考试成绩分布"",
                        subtext: ""Exam Score Distribution"",
                        textStyle: {
                            fontSize: 16
                        }

                    },
                    toolbox: {
                        orient: ""horizontal"",
                        itemSize: ""16"",
                        itemGap: 20,
                        feature: {
                            saveAsImage: {
                                name: ""学生考试成绩分布""
                            },
                            restore: {}
                        }
            ");
                WriteLiteral(@"        },
                    grid: {
                        top: 85,
                        left: 30,
                        right: 10
                    },
                    xAxis: {
                        name: ""分数"",
                        minInterval: 1,
                        maxInterval:5
                    },
                    yAxis: {
                        name: ""人数""
                    },
                    tooltip: {
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    series: [{
                        symbolSize: 15,
                        data: json.pairs,
                        type: 'scatter',
                        tooltip: {
                            padding: 10,
                            formatter: function (param) {
                                console.log(param);
                                return `成绩情况<br/>分数:${param.data[0]} <br/> 人数:${");
                WriteLiteral(@"param.data[1]}`
                            },
                            textStyle: {
                                fontSize: 12
                            }
                        }
                    }]
                };

                myChart.hideLoading();
                myScoreChart.hideLoading();

                myChart.setOption(optionExam);
                myScoreChart.setOption(optionScore);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                onMask(""错误"", errorThrown);
            }
        });
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
